name: ðŸ”ƒ Create PRs
# TODO: Return early if there are no changes between the source and target branches once implemented - https://github.com/orgs/community/discussions/82744
on:
  workflow_dispatch:
    inputs:
      dry-run:
        description: 'Run the workflow without creating PRs'
        required: false
        default: false
        type: boolean
  schedule:
    - cron: '0 2 * * *'
jobs:
  get-branches:
    outputs:
      branches: ${{ steps.get-branches.outputs.branches }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get branches
        id: get-branches
        shell: pwsh
        run: |
          $branches = git branch -r --format="%(refname:short)" | ForEach-Object { $_.Trim() -replace "^origin/", "" }
          # filter only branches that start with dev/
          $branches = $branches | Where-Object { $_ -match "^dev/" }
          $branchJson = ConvertTo-Json @($branches) -Compress
          Write-Host "branches=$branchJson"
          echo "branches=$branchJson" >> $env:GITHUB_OUTPUT
  create-pr:
    needs: get-branches
    strategy:
      max-parallel: 1
      matrix:
          branch: ${{fromJson(needs.get-branches.outputs.branches)}}
    runs-on: ubuntu-latest
    env:
      DRY_RUN: ${{ github.event.inputs.dry-run || github.event_name == 'schedule' }}
    steps:
      - name: Set Variables
        run: |
          TARGET=$(echo ${{ matrix.branch }} | sed 's/dev\///')
          SOURCE=${{ matrix.branch }}

          if [ -z "$TARGET" ]; then
            echo "TARGET is empty"
            exit 1
          fi
        
          if [ -z "$SOURCE" ]; then
            echo "SOURCE is empty"
            exit 1
          fi

          if [ "$SOURCE" == "$TARGET" ]; then
            echo "SOURCE is the same as TARGET"
            exit 1
          fi

          echo "DRY_RUN=${{ env.DRY_RUN }}"
          echo "SOURCE=$SOURCE"
          echo "TARGET=$TARGET"

          echo "SOURCE=$SOURCE" >> $GITHUB_ENV
          echo "TARGET=$TARGET" >> $GITHUB_ENV
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ env.SOURCE }}
      - name: Check for changes
        id: check-for-changes
        run: |
          DIFF=$(git diff --name-only ${{ env.TARGET }} ${{ env.SOURCE }} | wc -l)
          if [ $DIFF -eq 0 ]; then
            echo "No changes between ${{ env.TARGET }} and ${{ env.SOURCE }}"
            echo "SHOULD_RUN=false" >> $GITHUB_ENV
            exit 
          fi
            
          echo "Changes between ${{ env.TARGET }} and ${{ env.SOURCE }}"
          
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com"
          
          git checkout ${{ env.TARGET }}
          git merge $SOURCE --no-ff --no-edit

          echo "SHOULD_RUN=true" >> $GITHUB_ENV
      - name: Download GitVersion.yml
        if: ${{ env.SHOULD_RUN == 'true' }}
        shell: bash
        run: curl -sSL https://raw.githubusercontent.com/jcdcdev/jcdcdev.Umbraco.GitHub.Build/main/GitVersion.yml -o GitVersion.yml
      - name: Install GitVersion
        if: ${{ env.SHOULD_RUN == 'true' }}
        uses: gittools/actions/gitversion/setup@v1.1.1
        with:
          versionSpec: "5.x"
      - name: Determine Version
        if: ${{ env.SHOULD_RUN == 'true' }}
        id: gitversion
        uses: gittools/actions/gitversion/execute@v1.1.1
        with:
          useConfigFile: true
          configFilePath: "GitVersion.yml"
          disableNormalization: true 
      - uses: jcdcdev/jcdcdev.Github.GenerateChangelog@main
        if: ${{ env.SHOULD_RUN == 'true' }}
        id: changelog
        with:
          version: ${{ steps.gitversion.outputs.NuGetVersionV2 }}
          head-ref: ${{ env.TARGET }}
          github-token: ${{ secrets.JCDC_BOT_TOKEN }}
          include-version-as-heading: true
          include-compare-link: false
          include-links: true
      - name: Create PR
        if: ${{ env.SHOULD_RUN == 'true' }}
        env:
          SOURCE: ${{ env.SOURCE }}
          TARGET: ${{ env.TARGET }}
          TITLE: "${{ steps.gitversion.outputs.NuGetVersionV2 }}"
          BODY: |
            ### Merge ${{ env.SOURCE }} into ${{ env.TARGET }}
            ${{ steps.changelog.outputs.changelog }}
          GITHUB_TOKEN: ${{ secrets.JCDC_BOT_TOKEN }}
        uses: pyrbin/single-pr-updater@latest
        with:
          label: ðŸš€ release
          head: ${{ env.SOURCE }}
          base: ${{ env.TARGET }}
          title: ${{ env.TITLE }}
          body: ${{ env.BODY }}
          draft: false
